{"ast":null,"code":"import * as i0 from \"@angular/core\";\nexport class AppComponent {\n  constructor() {\n    this.password = '';\n    this.useLetters = false;\n    this.useNumbers = false;\n    this.useSymbols = false;\n    this.length = 0;\n  }\n  onUseLetters() {\n    this.useLetters = !this.useLetters;\n    console.log(\"Letters \", this.useLetters);\n  }\n  onUseNumbers() {\n    this.useNumbers = !this.useNumbers;\n    console.log(\"Numbers \", this.useNumbers);\n  }\n  onUseSymbols() {\n    this.useSymbols = !this.useSymbols;\n    console.log(\"Symbols \", this.useSymbols);\n  }\n  getValue(values) {\n    const parsedValue = parseInt(values);\n    if (!isNaN(parsedValue)) {\n      this.length = parsedValue;\n    }\n    console.log(\"Password Length \", this.length);\n  }\n  onButtonClick() {\n    let validChar = '';\n    const letters = 'abcdefghijklmnopqrstuvwxyz';\n    const numbers = '1234567890';\n    const symbols = '!@#$%^&*()';\n    let pwd = '';\n    if (this.useLetters) {\n      validChar += letters;\n    }\n    if (this.useNumbers) {\n      validChar += numbers;\n    }\n    if (this.useSymbols) {\n      validChar += symbols;\n    }\n    for (let i = 1; i <= this.length; i++) {\n      const index = Math.floor(Math.random() * validChar.length);\n      pwd += validChar[index];\n    }\n    this.password = pwd;\n  }\n}\nAppComponent.ɵfac = function AppComponent_Factory(t) {\n  return new (t || AppComponent)();\n};\nAppComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: AppComponent,\n  selectors: [[\"app-root\"]],\n  decls: 25,\n  vars: 1,\n  consts: [[3, \"input\"], [\"type\", \"checkbox\", 3, \"change\"], [3, \"click\"], [3, \"value\"]],\n  template: function AppComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"h1\");\n      i0.ɵɵtext(1, \" Password Generator \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(2, \"div\")(3, \"label\");\n      i0.ɵɵtext(4, \"Enter Length: \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(5, \"input\", 0);\n      i0.ɵɵlistener(\"input\", function AppComponent_Template_input_input_5_listener($event) {\n        return ctx.onChangeLength($event.target.value);\n      });\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(6, \"div\")(7, \"label\");\n      i0.ɵɵtext(8, \" Use Letters \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(9, \"input\", 1);\n      i0.ɵɵlistener(\"change\", function AppComponent_Template_input_change_9_listener() {\n        return ctx.onUseLetters();\n      });\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(10, \"div\")(11, \"label\");\n      i0.ɵɵtext(12, \" Use Numbers \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(13, \"input\", 1);\n      i0.ɵɵlistener(\"change\", function AppComponent_Template_input_change_13_listener() {\n        return ctx.onUseNumbers();\n      });\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(14, \"div\")(15, \"label\");\n      i0.ɵɵtext(16, \" Use Symbols \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(17, \"input\", 1);\n      i0.ɵɵlistener(\"change\", function AppComponent_Template_input_change_17_listener() {\n        return ctx.onUseSymbols();\n      });\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(18, \"div\")(19, \"button\", 2);\n      i0.ɵɵlistener(\"click\", function AppComponent_Template_button_click_19_listener() {\n        return ctx.onButtonClick();\n      });\n      i0.ɵɵtext(20, \" Generate \");\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(21, \"div\")(22, \"label\");\n      i0.ɵɵtext(23, \"Your Password \");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelement(24, \"input\", 3);\n      i0.ɵɵelementEnd();\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(24);\n      i0.ɵɵproperty(\"value\", ctx.password);\n    }\n  },\n  styles: [\"\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n});","map":{"version":3,"mappings":";AAOA,OAAM,MAAOA,YAAY;EALzBC;IAOE,aAAQ,GAAG,EAAE;IACb,eAAU,GAAG,KAAK;IAClB,eAAU,GAAG,KAAK;IAClB,eAAU,GAAG,KAAK;IAClB,WAAM,GAAG,CAAC;;EAEVC,YAAY;IACV,IAAI,CAACC,UAAU,GAAG,CAAC,IAAI,CAACA,UAAU;IAClCC,OAAO,CAACC,GAAG,CAAC,UAAU,EAAE,IAAI,CAACF,UAAU,CAAC;EAC1C;EAEAG,YAAY;IACV,IAAI,CAACC,UAAU,GAAG,CAAC,IAAI,CAACA,UAAU;IAClCH,OAAO,CAACC,GAAG,CAAC,UAAU,EAAE,IAAI,CAACE,UAAU,CAAC;EAC1C;EAEAC,YAAY;IACV,IAAI,CAACC,UAAU,GAAG,CAAC,IAAI,CAACA,UAAU;IAClCL,OAAO,CAACC,GAAG,CAAC,UAAU,EAAE,IAAI,CAACI,UAAU,CAAC;EAC1C;EAEAC,QAAQ,CAAEC,MAAe;IAEvB,MAAMC,WAAW,GAAGC,QAAQ,CAACF,MAAM,CAAC;IACpC,IAAG,CAACG,KAAK,CAACF,WAAW,CAAC,EAAE;MACtB,IAAI,CAACG,MAAM,GAAGH,WAAW;;IAE3BR,OAAO,CAACC,GAAG,CAAC,kBAAkB,EAAC,IAAI,CAACU,MAAM,CAAC;EAC7C;EAEAC,aAAa;IAEX,IAAIC,SAAS,GAAG,EAAE;IAClB,MAAMC,OAAO,GAAG,4BAA4B;IAC5C,MAAMC,OAAO,GAAG,YAAY;IAC5B,MAAMC,OAAO,GAAG,YAAY;IAE5B,IAAIC,GAAG,GAAC,EAAE;IAEV,IAAI,IAAI,CAAClB,UAAU,EAAE;MACnBc,SAAS,IAAIC,OAAO;;IAGtB,IAAG,IAAI,CAACX,UAAU,EAAE;MAClBU,SAAS,IAAIE,OAAO;;IAGtB,IAAG,IAAI,CAACV,UAAU,EAAE;MAClBQ,SAAS,IAAIG,OAAO;;IAGtB,KAAI,IAAIE,CAAC,GAAC,CAAC,EAACA,CAAC,IAAE,IAAI,CAACP,MAAM,EAACO,CAAC,EAAE,EAAC;MAC7B,MAAMC,KAAK,GAAGC,IAAI,CAACC,KAAK,CAACD,IAAI,CAACE,MAAM,EAAE,GAAGT,SAAS,CAACF,MAAM,CAAC;MAC1DM,GAAG,IAAIJ,SAAS,CAACM,KAAK,CAAC;;IAEzB,IAAI,CAACI,QAAQ,GAAGN,GAAG;EAErB;;AA3DWrB,YAAY;mBAAZA,YAAY;AAAA;AAAZA,YAAY;QAAZA,YAAY;EAAA4B;EAAAC;EAAAC;EAAAC;EAAAC;IAAA;MCPzBC,0BAAI;MAACA,oCAAmB;MAAAA,iBAAK;MAE7BA,2BAAK;MACIA,8BAAc;MAAAA,iBAAQ;MAC7BA,gCAAuD;MAAhDA;QAAA,OAASC,uCAAmC;MAAA,EAAC;MAApDD,iBAAuD;MAGzDA,2BAAK;MACKA,6BAAY;MAAAA,iBAAQ;MAC5BA,gCAAmD;MAA5CA;QAAA,OAAUC,kBAAc;MAAA,EAAC;MAAhCD,iBAAmD;MAGrDA,4BAAK;MACKA,8BAAY;MAAAA,iBAAQ;MAC5BA,iCAAmD;MAA5CA;QAAA,OAAUC,kBAAc;MAAA,EAAC;MAAhCD,iBAAmD;MAGrDA,4BAAK;MACKA,8BAAY;MAAAA,iBAAQ;MAC5BA,iCAAmD;MAA5CA;QAAA,OAAUC,kBAAc;MAAA,EAAC;MAAhCD,iBAAmD;MAGrDA,4BAAK;MACKA;QAAA,OAASC,mBAAe;MAAA,EAAC;MAAED,2BAAS;MAAAA,iBAAS;MAGvDA,4BAAK;MACIA,+BAAc;MAAAA,iBAAQ;MAC7BA,4BAA4B;MAC9BA,iBAAM;;;MADGA,gBAAkB;MAAlBA,oCAAkB","names":["AppComponent","constructor","onUseLetters","useLetters","console","log","onUseNumbers","useNumbers","onUseSymbols","useSymbols","getValue","values","parsedValue","parseInt","isNaN","length","onButtonClick","validChar","letters","numbers","symbols","pwd","i","index","Math","floor","random","password","selectors","decls","vars","consts","template","i0","ctx"],"sourceRoot":"","sources":["D:\\AngularProjects\\PasswordGenerator\\src\\app\\app.component.ts","D:\\AngularProjects\\PasswordGenerator\\src\\app\\app.component.html"],"sourcesContent":["import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.sass']\n})\nexport class AppComponent {\n\n  password = '';\n  useLetters = false;\n  useNumbers = false;\n  useSymbols = false;\n  length = 0;\n\n  onUseLetters() {\n    this.useLetters = !this.useLetters;\n    console.log(\"Letters \", this.useLetters);\n  }\n\n  onUseNumbers() {\n    this.useNumbers = !this.useNumbers;\n    console.log(\"Numbers \", this.useNumbers);\n  }\n\n  onUseSymbols() {\n    this.useSymbols = !this.useSymbols;\n    console.log(\"Symbols \", this.useSymbols);\n  }\n\n  getValue (values : string) {\n\n    const parsedValue = parseInt(values);\n    if(!isNaN(parsedValue)) {\n      this.length = parsedValue;\n    }\n    console.log(\"Password Length \",this.length);\n  }\n\n  onButtonClick() {\n\n    let validChar = '';\n    const letters = 'abcdefghijklmnopqrstuvwxyz';\n    const numbers = '1234567890';\n    const symbols = '!@#$%^&*()';\n\n    let pwd='';\n\n    if (this.useLetters) {\n      validChar += letters;\n    }\n\n    if(this.useNumbers) {\n      validChar += numbers;\n    }\n\n    if(this.useSymbols) {\n      validChar += symbols;\n    }\n\n    for(let i=1;i<=this.length;i++){\n      const index = Math.floor(Math.random() * validChar.length);\n      pwd += validChar[index];\n    }\n    this.password = pwd;\n\n  }\n}\n","<h1> Password Generator </h1>\n\n<div>\n  <label>Enter Length: </label>\n  <input (input)=\"onChangeLength($event.target.value)\" />\n</div>\n\n<div>\n  <label> Use Letters </label>\n  <input (change)=\"onUseLetters()\" type=\"checkbox\" />\n</div>\n\n<div>\n  <label> Use Numbers </label>\n  <input (change)=\"onUseNumbers()\" type=\"checkbox\" />\n</div>\n\n<div>\n  <label> Use Symbols </label>\n  <input (change)=\"onUseSymbols()\" type=\"checkbox\" />\n</div>\n\n<div>\n  <button (click)=\"onButtonClick()\"> Generate </button>\n</div>\n\n<div>\n  <label>Your Password </label>\n  <input [value]=\"password\" />\n</div>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}